var i=class e{static numbers=["2","3","4","5","6","7","8","9","T","J","Q","K","A"];static suits=["S","H","C","D"];static _rep_suits=["\u2660","\u2665","\u2663","\u2666"];suite;number;constructor(r,s){let t=r.toUpperCase();if(!e.numbers.includes(t))throw new Error("Number is not correct (must be in ['2','3','4','5','6','7','8','9','T','J','Q','K','A'])");let n=s.toUpperCase();if(!e.suits.includes(n))throw new Error("Suite must be 'S' (Spades), 'H' (Hearts), 'C' (Clubs) or 'D' (Diamonds)");this.suite=e.suits.indexOf(n),this.number=e.numbers.indexOf(t)}static fromArray(r){return r.map(s=>s===void 0?null:new e(s[0],s[1]))}copy(){return new e(e.numbers[this.number],e.suits[this.suite])}static compare(r,s,t=!0){if(r===null&&s===null)return 0;if(r===null)return 1;if(s===null)return-1;let n=t?1:-1;return(r.number-s.number)*n}show(){console.log(e.numbers[this.number]+e._rep_suits[this.suite])}toString(){return e.numbers[this.number]+e._rep_suits[this.suite]}};var h=class e{static ranks=["HIGH CARD","ONE PAIR","TWO PAIR","TRIPS","STRAIGHT","FLUSH","FULL","QUADS","STRAIGHT FLUSH"];cards;rank;constructor(r){if(r==null||r.length!==5)throw new Error("Hand must have 5 cards");this.cards=r,this.rank=this.get_rank(),this.cards=this.sort_numbers_by_rank()}get_rank(){return this.cards.sort((r,s)=>i.compare(r,s,!1)),this.is_straight_flush()?8:this.is_quads()?7:this.is_full()?6:this.is_flush()?5:this.is_straight()?4:this.is_trips()?3:this.is_two_pair()?2:this.is_one_pair()?1:this.is_high_card()?0:-1}is_straight_flush(){return this.is_flush()&&this.is_straight()}is_quads(){return this.cards[0].number===this.cards[3].number||this.cards[1].number===this.cards[4].number}is_full(){return this.cards[0].number===this.cards[2].number&&this.cards[3].number===this.cards[4].number||this.cards[0].number===this.cards[1].number&&this.cards[2].number===this.cards[4].number}is_flush(){for(let r=0;r<4;r++)if(this.cards[r].suite!==this.cards[r+1].suite)return!1;return!0}is_straight(){if(this.cards[0].number===12&&this.cards[1].number===3&&this.cards[2].number===2&&this.cards[3].number===1&&this.cards[4].number===0)return this.cards=[...this.cards.slice(1,5),this.cards[0]],!0;for(let r=0;r<4;r++)if(this.cards[r].number-1!==this.cards[r+1].number)return!1;return!0}is_trips(){for(let r=0;r<3;r++)if(this.cards[r].number===this.cards[r+2].number)return!0;return!1}is_two_pair(){return this.cards[0].number===this.cards[1].number&&this.cards[2].number===this.cards[3].number||this.cards[0].number===this.cards[1].number&&this.cards[3].number===this.cards[4].number||this.cards[1].number===this.cards[2].number&&this.cards[3].number===this.cards[4].number}is_one_pair(){for(let r=0;r<4;r++)if(this.cards[r].number===this.cards[r+1].number)return!0;return!1}is_high_card(){return!0}sort_numbers_by_rank(){let r=[...this.cards];return this.rank===7&&r[0].number!==r[3].number?r=[...r.slice(1,5),r[0]]:this.rank===6&&r[0].number!==r[2].number?r=[...r.slice(2,5),...r.slice(0,2)]:this.rank===3?r[1].number===r[3].number?r=[...r.slice(1,4),r[0],r[4]]:r[2].number===r[4].number&&(r=[...r.slice(2,5),r[0],r[1]]):this.rank===2?r[0].number!==r[1].number?r=[...r.slice(1,5),r[0]]:r[2].number!==r[1].number&&r[2].number!==r[3].number&&(r=[...r.slice(0,2),...r.slice(3,5),r[2]]):this.rank===1&&(r[1].number===r[2].number?r=[...r.slice(1,3),r[0],...r.slice(3,5)]:r[2].number===r[3].number?r=[...r.slice(2,4),...r.slice(0,2),r[4]]:r[3].number===r[4].number&&(r=[...r.slice(3,5),...r.slice(0,3)])),r}compare_to(r){if(!(r instanceof e))throw new Error("compare_to must receive an instance of Hand");if(this.rank>r.rank)return 1;if(this.rank<r.rank)return-1;for(let s=0;s<5;s++){if(this.cards[s].number>r.cards[s].number)return 1;if(this.cards[s].number<r.cards[s].number)return-1}return 0}copy(){let r=this.cards.map(s=>s.copy());return new e(r)}toString(){let r="Hand: ";for(let s=0;s<5;s++)r+=this.cards[s].toString()+" ";return r+"- "+e.ranks[this.rank]}show(){console.log(this.toString())}};var d=class{cards;hands;best_hand;constructor(r){if(r.length!==7)throw new Error("Combination must have 7 cards");this.cards=r,this.hands=this.generateHands(),this.best_hand=this.getBestHand()}generateHands(){let r=[];for(let s=0;s<7;s++)for(let t=s+1;t<7;t++)for(let n=t+1;n<7;n++)for(let a=n+1;a<7;a++)for(let l=a+1;l<7;l++)r.push(new h([this.cards[s],this.cards[t],this.cards[n],this.cards[a],this.cards[l]]));return r}getBestHand(){let r=this.hands[0];for(let s=1;s<this.hands.length;s++)r.compare_to(this.hands[s])===-1&&(r=this.hands[s]);return r}};var c=class e{cards;constructor(){this.cards=[],i.numbers.forEach(r=>{i.suits.forEach(s=>{this.cards.push(new i(r,s))})})}is_free_card(r){if(!(r instanceof i))throw new Error("is_free_card must receive an instance of Card");return this.cards.some(s=>s.toString()===r.toString())}shuffle(){this.cards.sort(()=>.5-Math.random())}deal_random(){if(this.cards.length<=0)throw new Error("Trying to deal from an empty deck");this.shuffle();let r=this.cards[0];return this.cards=this.cards.slice(1),r}remove_cards(r){r.forEach(s=>this.remove_card(s))}remove_card(r){if(!(r instanceof i))throw new Error("remove_card must receive only an instance of Card");this.cards=this.cards.filter(s=>s.toString()!==r.toString())}return_cards(r){for(let s=0;s<r.length;s++)r[s]instanceof i&&this.is_free_card(r[s])&&this.cards.push(r[s])}copy(){let r=new e;return r.cards=this.cards.map(s=>s.copy()),r}toString(){return this.cards.map(r=>r.toString()).join(" ")}show(){console.log(this.toString())}};var f=class e{name;cards;hand;wins;loses;draws;constructor(r){this.name=r,this.cards=[null,null],this.hand=null,this.wins=0,this.loses=0,this.draws=0}copy(){let r=new e(this.name);r.wins=this.wins,r.loses=this.loses,r.draws=this.draws,r.cards=[null,null];for(let s=0;s<2;s++)this.cards!=null&&this.cards[s]!=null&&(r.cards[s]=this.cards[s].copy());return this.hand!=null&&(r.hand=this.hand.copy()),r}show(){console.log(`${this.cards[0]?.toString()} ${this.cards[1]?.toString()}`)}toString(){return this.name}};var o=class e{cards;deck;players;constructor(r){this.cards=[null,null,null,null,null],this.deck=new c,this.deck.shuffle(),this.players=[];for(let s=0;s<r;s++)this.players.push(new f(`Player ${s+1}`))}deal_to_player(r,s){if(this.deck.return_cards(r.cards),s.length>2)throw new Error("Players can only take 2 cards");s.forEach(t=>{if(!this.deck.is_free_card(t))throw new Error("Trying to deal a taken card")}),this.deck.remove_cards(s),s.length===1&&(s=[s[0],null]),r.cards=s}deal_to_table(r){if(r.length>5)throw new Error("Table can only take 5 cards");if(r.length<1)throw new Error("Must deal at least 1 card");r.forEach(s=>{if(!this.deck.is_free_card(s))throw new Error("Trying to deal a taken card")}),this.deck.remove_cards(r);for(let s=r.length;s<5;s++)r.push(null);this.cards=[...r]}full_deal_random(){this.players.forEach(r=>{for(let s=0;s<2;s++)r.cards[s]==null&&(r.cards[s]=this.deck.deal_random())});for(let r=0;r<5;r++)this.cards[r]==null&&(this.cards[r]=this.deck.deal_random())}player_hands(){let r=this.cards;this.players.forEach(s=>{let t=s.cards,n=new d([...r,...t]);s.hand=n.best_hand})}winners(){let r=[];return this.players.forEach(s=>{if(r.length===0)r.push(s);else if(r[0]&&r[0].hand){let t=r[0].hand.compare_to(s.hand);t===0?r.push(s):t===-1&&(r=[],r.push(s))}}),r}copy(){let r=new e(this.players.length);r.cards=[null,null,null,null,null];for(let s=0;s<5;s++)this.cards[s]!=null&&(r.cards[s]=this.cards[s].copy());r.deck=this.deck.copy(),r.deck.shuffle(),r.players=[];for(let s=0;s<this.players.length;s++)this.players[s]!=null&&r.players.push(this.players[s].copy());return r}show(){let r=" Table: ";for(let s=0;s<5;s++)this.cards[s]!=null&&(r+=this.cards[s].toString()+" ");console.log(r);for(let s=0;s<this.players.length;s++){let t=`    p${s}: `;for(let n=0;n<2;n++)this.players[s].cards[n]!=null&&(t+=this.players[s].cards[n].toString()+" ");console.log(t)}}};var m=class{table;constructor(r){if(typeof r=="number")this.table=new o(r);else if(r instanceof o)this.table=r;else throw new Error("Par\xE1metro no v\xE1lido")}compute(r){if(r<1)throw new Error("times must be greater than 0");this.reset_stats();let s=null;for(let t=0;t<r;t++){s=this.table.copy(),s.full_deal_random(),s.player_hands();let n=s.winners();this.table.players.forEach(a=>{let l=!1;for(let u=0;u<n.length;u++)a.toString()===n[u].toString()&&(l=!0);l?n.length===1?a.wins++:a.draws++:a.loses++})}}reset_stats(){this.table.players.forEach(r=>{r.wins=0,r.draws=0,r.loses=0})}tableToString(){let r=`Table
	`;return this.table.cards.forEach(s=>{s!=null?r+=s.toString()+" ":r+="XX "}),r+=`
`,r}playerToString(r){let s=`${r.name} |`;return r.cards.forEach(t=>{t!=null?s+=` ${t.toString()}`:s+=" XX"}),s}playersToString(){let r="";return this.table.show(),this.table.players.forEach(s=>{let t=s.wins+s.draws+s.loses,n=s.wins/t*100,a=s.draws/t*100,l=s.loses/t*100,u=String(s.wins).padStart(t.toString().length," "),b=String(s.draws).padStart(t.toString().length," "),g=String(s.loses).padStart(t.toString().length," ");r+=this.playerToString(s)+`
`,r+=`	Wins: 	${u}	${n.toFixed(2).padStart(6," ")}%
`,r+=`	Draws:	${b}	${a.toFixed(2).padStart(6," ")}%
`,r+=`	Loses:	${g}	${l.toFixed(2).padStart(6," ")}%
`}),r}dealToPlayer(r,s){this.table.deal_to_player(this.table.players[r],i.fromArray(s))}toString(){let r=this.tableToString();return r+=this.playersToString(),r}show(){console.log(this.toString())}};window.Proker=m;
//# sourceMappingURL=main.js.map
