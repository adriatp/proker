{
  "version": 3,
  "sources": ["../src/card.ts", "../src/hand.ts", "../src/combination.ts", "../src/deck.ts", "../src/player.ts", "../src/table.ts", "../src/proker.ts", "../src/main.ts"],
  "sourcesContent": ["export default class Card {\n  static numbers: string[] = [\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"T\",\n    \"J\",\n    \"Q\",\n    \"K\",\n    \"A\",\n  ];\n  static suits: string[] = [\"S\", \"H\", \"C\", \"D\"];\n  static _rep_suits: string[] = [\"\\u2660\", \"\\u2665\", \"\\u2663\", \"\\u2666\"];\n\n  suite: number;\n  number: number;\n\n  constructor(number: string, suite: string) {\n    const _tmpNumber = number.toUpperCase();\n    if (!Card.numbers.includes(_tmpNumber)) {\n      throw new Error(\n        \"Number is not correct (must be in ['2','3','4','5','6','7','8','9','T','J','Q','K','A'])\",\n      );\n    }\n    const _tmpSuite = suite.toUpperCase();\n    if (!Card.suits.includes(_tmpSuite)) {\n      throw new Error(\n        \"Suite must be 'S' (Spades), 'H' (Hearts), 'C' (Clubs) or 'D' (Diamonds)\",\n      );\n    }\n    this.suite = Card.suits.indexOf(_tmpSuite);\n    this.number = Card.numbers.indexOf(_tmpNumber);\n  }\n\n  copy(): Card {\n    return new Card(Card.numbers[this.number], Card.suits[this.suite]);\n  }\n\n  static compare(\n    c1: Card | null,\n    c2: Card | null,\n    asc: boolean = true,\n  ): number {\n    if (c1 === null && c2 === null) return 0;\n    if (c1 === null) return 1;\n    if (c2 === null) return -1;\n    const factor = asc ? 1 : -1;\n    return (c1.number - c2.number) * factor;\n  }\n\n  show(): void {\n    console.log(Card.numbers[this.number] + Card._rep_suits[this.suite]);\n  }\n\n  toString(): string {\n    return Card.numbers[this.number] + Card._rep_suits[this.suite];\n  }\n}\n", "// Hand.ts\nimport Card from \"./card.ts\";\n\nexport default class Hand {\n  static ranks: string[] = [\n    \"HIGH CARD\",\n    \"ONE PAIR\",\n    \"TWO PAIR\",\n    \"TRIPS\",\n    \"STRAIGHT\",\n    \"FLUSH\",\n    \"FULL\",\n    \"QUADS\",\n    \"STRAIGHT FLUSH\",\n  ];\n\n  cards: (Card)[];\n  rank: number;\n\n  constructor(cards: (Card)[]) {\n    if (cards === null || cards === undefined || cards.length !== 5) {\n      throw new Error(\"Hand must have 5 cards\");\n    }\n    this.cards = cards;\n    this.rank = this.get_rank();\n    this.cards = this.sort_numbers_by_rank();\n  }\n\n  get_rank(): number {\n    this.cards.sort((a, b) => Card.compare(a, b, false));\n    if (this.is_straight_flush()) return 8;\n    else if (this.is_quads()) return 7;\n    else if (this.is_full()) return 6;\n    else if (this.is_flush()) return 5;\n    else if (this.is_straight()) return 4;\n    else if (this.is_trips()) return 3;\n    else if (this.is_two_pair()) return 2;\n    else if (this.is_one_pair()) return 1;\n    else if (this.is_high_card()) return 0;\n    return -1; // In case no rank is matched (should not happen)\n  }\n\n  is_straight_flush(): boolean {\n    return this.is_flush() && this.is_straight();\n  }\n\n  is_quads(): boolean {\n    return this.cards[0].number === this.cards[3].number ||\n      this.cards[1].number === this.cards[4].number;\n  }\n\n  is_full(): boolean {\n    return (this.cards[0].number === this.cards[2].number &&\n      this.cards[3].number === this.cards[4].number) ||\n      (this.cards[0].number === this.cards[1].number &&\n        this.cards[2].number === this.cards[4].number);\n  }\n\n  is_flush(): boolean {\n    for (let i = 0; i < 4; i++) {\n      if (this.cards[i].suite !== this.cards[i + 1].suite) return false;\n    }\n    return true;\n  }\n\n  is_straight(): boolean {\n    if (\n      this.cards[0].number === 12 && this.cards[1].number === 3 &&\n      this.cards[2].number === 2 && this.cards[3].number === 1 &&\n      this.cards[4].number === 0\n    ) {\n      this.cards = [...this.cards.slice(1, 5), this.cards[0]];\n      return true;\n    }\n    for (let i = 0; i < 4; i++) {\n      if (this.cards[i].number - 1 !== this.cards[i + 1].number) return false;\n    }\n    return true;\n  }\n\n  is_trips(): boolean {\n    for (let i = 0; i < 3; i++) {\n      if (this.cards[i].number === this.cards[i + 2].number) return true;\n    }\n    return false;\n  }\n\n  is_two_pair(): boolean {\n    return (this.cards[0].number === this.cards[1].number &&\n      this.cards[2].number === this.cards[3].number) ||\n      (this.cards[0].number === this.cards[1].number &&\n        this.cards[3].number === this.cards[4].number) ||\n      (this.cards[1].number === this.cards[2].number &&\n        this.cards[3].number === this.cards[4].number);\n  }\n\n  is_one_pair(): boolean {\n    for (let i = 0; i < 4; i++) {\n      if (this.cards[i].number === this.cards[i + 1].number) return true;\n    }\n    return false;\n  }\n\n  is_high_card(): boolean {\n    return true;\n  }\n\n  sort_numbers_by_rank(): Card[] {\n    let cards = [...this.cards];\n    if (this.rank === 7 && cards[0].number !== cards[3].number) { // quads\n      cards = [...cards.slice(1, 5), cards[0]];\n    } else if (this.rank === 6 && cards[0].number !== cards[2].number) { // full\n      cards = [...cards.slice(2, 5), ...cards.slice(0, 2)];\n    } else if (this.rank === 3) { // trips\n      if (cards[1].number === cards[3].number) {\n        cards = [...cards.slice(1, 4), cards[0], cards[4]];\n      } else if (cards[2].number === cards[4].number) {\n        cards = [...cards.slice(2, 5), cards[0], cards[1]];\n      }\n    } else if (this.rank === 2) { // two_pair\n      if (cards[0].number !== cards[1].number) {\n        cards = [...cards.slice(1, 5), cards[0]];\n      } else if (\n        cards[2].number !== cards[1].number &&\n        cards[2].number !== cards[3].number\n      ) {\n        cards = [...cards.slice(0, 2), ...cards.slice(3, 5), cards[2]];\n      }\n    } else if (this.rank === 1) { // one_pair\n      if (cards[1].number === cards[2].number) {\n        cards = [...cards.slice(1, 3), cards[0], ...cards.slice(3, 5)];\n      } else if (cards[2].number === cards[3].number) {\n        cards = [...cards.slice(2, 4), ...cards.slice(0, 2), cards[4]];\n      } else if (cards[3].number === cards[4].number) {\n        cards = [...cards.slice(3, 5), ...cards.slice(0, 3)];\n      }\n    }\n    return cards;\n  }\n\n  compare_to(other: Hand | null): number {\n    if (!(other instanceof Hand)) {\n      throw new Error(\"compare_to must receive an instance of Hand\");\n    }\n    if (this.rank > other.rank) return 1;\n    else if (this.rank < other.rank) return -1;\n    else {\n      for (let i = 0; i < 5; i++) {\n        if (this.cards[i].number > other.cards[i].number) return 1;\n        else if (this.cards[i].number < other.cards[i].number) return -1;\n      }\n      return 0;\n    }\n  }\n\n  copy(): Hand {\n    const cards = this.cards.map((card) => card.copy());\n    return new Hand(cards);\n  }\n\n  toString(): string {\n    let hand_str = \"Hand: \";\n    for (let i = 0; i < 5; i++) {\n      hand_str += this.cards[i].toString() + \" \";\n    }\n    return hand_str + \"- \" + Hand.ranks[this.rank];\n  }\n\n  show(): void {\n    console.log(this.toString());\n  }\n}\n", "import Hand from \"./hand.ts\";\nimport Card from \"./card.ts\";\n\nexport default class Combination {\n  cards: (Card)[];\n  hands: Hand[];\n  best_hand: Hand;\n\n  constructor(cards: (Card)[]) {\n    if (cards.length !== 7) {\n      throw new Error(\"Combination must have 7 cards\");\n    }\n    this.cards = cards;\n    this.hands = this.generateHands();\n    this.best_hand = this.getBestHand();\n  }\n\n  private generateHands(): Hand[] {\n    const hands: Hand[] = [];\n    for (let i = 0; i < 7; i++) {\n      for (let j = i + 1; j < 7; j++) {\n        for (let k = j + 1; k < 7; k++) {\n          for (let l = k + 1; l < 7; l++) {\n            for (let m = l + 1; m < 7; m++) {\n              hands.push(\n                new Hand([\n                  this.cards[i],\n                  this.cards[j],\n                  this.cards[k],\n                  this.cards[l],\n                  this.cards[m],\n                ]),\n              );\n            }\n          }\n        }\n      }\n    }\n    return hands;\n  }\n\n  private getBestHand(): Hand {\n    let best_hand = this.hands[0];\n    for (let i = 1; i < this.hands.length; i++) {\n      if (best_hand.compare_to(this.hands[i]) === -1) {\n        best_hand = this.hands[i];\n      }\n    }\n    return best_hand;\n  }\n}\n", "import Card from \"./card.ts\";\n\nexport default class Deck {\n  cards: Card[];\n\n  constructor() {\n    this.cards = [];\n    Card.numbers.forEach((n) => {\n      Card.suits.forEach((s) => {\n        this.cards.push(new Card(n, s));\n      });\n    });\n  }\n\n  is_free_card(card: Card | null): boolean {\n    if (!(card instanceof Card)) {\n      throw new Error(\"is_free_card must receive an instance of Card\");\n    }\n    return this.cards.some((deckCard) =>\n      deckCard.toString() === card.toString()\n    );\n  }\n\n  shuffle(): void {\n    this.cards.sort(() => 0.5 - Math.random());\n  }\n\n  deal_random(): Card {\n    if (this.cards.length <= 0) {\n      throw new Error(\"Trying to deal from an empty deck\");\n    }\n    this.shuffle();\n    const ret_card = this.cards[0];\n    this.cards = this.cards.slice(1);\n    return ret_card;\n  }\n\n  remove_cards(cards: (Card | null)[]): void {\n    cards.forEach((card) => this.remove_card(card));\n  }\n\n  remove_card(card: Card | null): void {\n    if (!(card instanceof Card)) {\n      throw new Error(\"remove_card must receive only an instance of Card\");\n    }\n    this.cards = this.cards.filter((deckCard) =>\n      deckCard.toString() !== card.toString()\n    );\n  }\n\n  copy(): Deck {\n    const new_deck = new Deck();\n    new_deck.cards = this.cards.map((card) => card.copy());\n    return new_deck;\n  }\n\n  toString(): string {\n    return this.cards.map((card) => card.toString()).join(\" \");\n  }\n\n  show(): void {\n    console.log(this.toString());\n  }\n}\n", "import Card from \"./card.ts\";\nimport Hand from \"./hand.ts\";\n\nexport default class Player {\n  name: string;\n  cards: (Card | null)[];\n  hand: Hand | null;\n  wins: number;\n  loses: number;\n  draws: number;\n\n  constructor(name: string) {\n    this.name = name;\n    this.cards = [null, null];\n    this.hand = null;\n    this.wins = 0;\n    this.loses = 0;\n    this.draws = 0;\n  }\n\n  copy(): Player {\n    const new_player = new Player(this.name);\n    new_player.wins = this.wins;\n    new_player.loses = this.loses;\n    new_player.draws = this.draws;\n    new_player.cards = [null, null];\n\n    for (let i = 0; i < 2; i++) {\n      if (this.cards != null && this.cards[i] != null) {\n        new_player.cards[i] = this.cards[i]!.copy();\n      }\n    }\n\n    if (this.hand != null) {\n      new_player.hand = this.hand.copy();\n    }\n\n    return new_player;\n  }\n\n  show(): void {\n    console.log(`${this.cards[0]?.toString()} ${this.cards[1]?.toString()}`);\n  }\n\n  toString(): string {\n    return this.name;\n  }\n}\n", "import Combination from \"./combination.ts\";\nimport Deck from \"./deck.ts\";\nimport Player from \"./player.ts\";\nimport Card from \"./card.ts\";\n\nexport default class Table {\n  cards: (Card | null)[];\n  deck: Deck;\n  players: Player[];\n\n  constructor(n_players: number) {\n    this.cards = [null, null, null, null, null];\n    this.deck = new Deck();\n    this.deck.shuffle();\n    this.players = [];\n    for (let i = 0; i < n_players; i++) {\n      this.players.push(new Player(`Player ${i + 1}`));\n    }\n  }\n\n  deal_to_player(player: Player, cards: (Card | null)[]): void {\n    if (cards.length > 2) throw new Error(\"Players can only take 2 cards\");\n    if (cards.length < 1) throw new Error(\"Must deal at least 1 card\");\n\n    cards.forEach((c) => {\n      if (!this.deck.is_free_card(c)) {\n        throw new Error(\"Trying to deal a taken card\");\n      }\n    });\n\n    this.deck.remove_cards(cards);\n    if (cards.length === 1) cards = [cards[0], null];\n    player.cards = cards;\n  }\n\n  deal_to_table(cards: (Card | null)[]): void {\n    if (cards.length > 5) throw new Error(\"Table can only take 5 cards\");\n    if (cards.length < 1) throw new Error(\"Must deal at least 1 card\");\n\n    cards.forEach((c) => {\n      if (!this.deck.is_free_card(c)) {\n        throw new Error(\"Trying to deal a taken card\");\n      }\n    });\n\n    this.deck.remove_cards(cards);\n    for (let i = cards.length; i < 5; i++) {\n      cards.push(null);\n    }\n    this.cards = [...cards];\n  }\n\n  full_deal_random(): void {\n    // deal players\n    this.players.forEach((p) => {\n      for (let i = 0; i < 2; i++) {\n        if (p.cards[i] == null) {\n          p.cards[i] = this.deck.deal_random();\n        }\n      }\n    });\n    // deal table\n    for (let i = 0; i < 5; i++) {\n      if (this.cards[i] == null) {\n        this.cards[i] = this.deck.deal_random();\n      }\n    }\n  }\n\n  player_hands(): void {\n    const valid_table_cards: Card[] = this.cards as Card[];\n    this.players.forEach((p) => {\n      const valid_player_cards: Card[] = p.cards as Card[];\n      const player_combination = new Combination([\n        ...valid_table_cards,\n        ...valid_player_cards,\n      ]);\n      p.hand = player_combination.best_hand;\n    });\n  }\n\n  winners(): Player[] {\n    let winners: Player[] = [];\n    this.players.forEach((p) => {\n      if (winners.length === 0) {\n        winners.push(p);\n      } else if (winners[0] && winners[0].hand) {\n        const cmp = winners[0].hand.compare_to(p.hand);\n        if (cmp === 0) {\n          winners.push(p);\n        } else if (cmp === -1) {\n          winners = [];\n          winners.push(p);\n        }\n      }\n    });\n    return winners;\n  }\n\n  copy(): Table {\n    const new_table = new Table(this.players.length);\n    new_table.cards = [null, null, null, null, null];\n    for (let i = 0; i < 5; i++) {\n      if (this.cards[i] != null) new_table.cards[i] = this.cards[i]!.copy();\n    }\n    new_table.deck = this.deck.copy();\n    new_table.deck.shuffle();\n    new_table.players = [];\n    for (let i = 0; i < this.players.length; i++) {\n      if (this.players[i] != null) {\n        new_table.players.push(this.players[i].copy());\n      }\n    }\n    return new_table;\n  }\n\n  show(): void {\n    let table_cards = \" Table: \";\n    for (let i = 0; i < 5; i++) {\n      if (this.cards[i] != null) table_cards += this.cards[i]!.toString() + \" \";\n    }\n    console.log(table_cards);\n    for (let i = 0; i < this.players.length; i++) {\n      let player_cards = `    p${i}: `;\n      for (let j = 0; j < 2; j++) {\n        if (this.players[i].cards[j] != null) {\n          player_cards += this.players[i].cards[j]!.toString() + \" \";\n        }\n      }\n      console.log(player_cards);\n    }\n  }\n}\n", "import Table from \"./table.ts\";\nimport Player from \"./player.ts\";\n\nexport default class Proker {\n  table: Table;\n\n  constructor(table: Table) {\n    this.table = table;\n  }\n\n  compute(times: number): void {\n    if (times < 1) throw new Error(\"times must be greater than 0\");\n    this.reset_stats();\n    let aux_table: Table | null = null;\n    for (let i = 0; i < times; i++) {\n      aux_table = this.table.copy();\n      aux_table.full_deal_random();\n      aux_table.player_hands();\n      const winners = aux_table.winners();\n      this.table.players.forEach((p) => {\n        let is_winner = false;\n        for (let i = 0; i < winners.length; i++) {\n          if (p.toString() === winners[i].toString()) {\n            is_winner = true;\n          }\n        }\n        if (is_winner) {\n          if (winners.length === 1) {\n            p.wins++;\n          } else {\n            p.draws++;\n          }\n        } else {\n          p.loses++;\n        }\n      });\n    }\n  }\n\n  reset_stats(): void {\n    this.table.players.forEach((p) => {\n      p.wins = 0;\n      p.draws = 0;\n      p.loses = 0;\n    });\n  }\n\n  tableToString(): string {\n    let ret_str = \"Table\\n\\t\";\n    this.table.cards.forEach((c) => {\n      if (c != null) {\n        ret_str += c.toString() + \" \";\n      } else {\n        ret_str += \"XX \";\n      }\n    });\n    ret_str += \"\\n\";\n    return ret_str;\n  }\n\n  playerToString(player: Player): string {\n    let ret_str = `${player.name} |`;\n    player.cards.forEach((c) => {\n      if (c != null) {\n        ret_str += ` ${c.toString()}`;\n      } else {\n        ret_str += \" XX\";\n      }\n    });\n    return ret_str;\n  }\n\n  playersToString(): string {\n    let ret_str = \"\";\n    this.table.show();\n    this.table.players.forEach((p) => {\n      const total = p.wins + p.draws + p.loses;\n      const pcent_wins = (p.wins / total) * 100;\n      const pcent_draws = (p.draws / total) * 100;\n      const pcent_loses = (p.loses / total) * 100;\n      const wins_str = String(p.wins).padStart(total.toString().length, \" \");\n      const draws_str = String(p.draws).padStart(total.toString().length, \" \");\n      const loses_str = String(p.loses).padStart(total.toString().length, \" \");\n      ret_str += this.playerToString(p) + \"\\n\";\n      ret_str += `\\tWins: \\t${wins_str}\\t${\n        pcent_wins.toFixed(2).padStart(6, \" \")\n      }%\\n`;\n      ret_str += `\\tDraws:\\t${draws_str}\\t${\n        pcent_draws.toFixed(2).padStart(6, \" \")\n      }%\\n`;\n      ret_str += `\\tLoses:\\t${loses_str}\\t${\n        pcent_loses.toFixed(2).padStart(6, \" \")\n      }%\\n`;\n    });\n    return ret_str;\n  }\n\n  toString(): string {\n    let ret_str = this.tableToString();\n    ret_str += this.playersToString();\n    return ret_str;\n  }\n\n  show(): void {\n    console.log(this.toString());\n  }\n}\n", "import Card from \"./card.ts\";\nimport Table from \"./table.ts\";\nimport Proker from \"./proker.ts\";\n\nimport _Combination from \"./combination.ts\";\nimport _Deck from \"./deck.ts\";\nimport _Hand from \"./hand.ts\";\nimport _Player from \"./player.ts\";\n\nconst t = new Table(2);\nlet cards = [new Card('A','s'), new Card('j','s')];\nt.deal_to_player(t.players[0],cards);\ncards = [new Card('6','h'), new Card('6','c')];\nt.deal_to_player(t.players[1],cards);\nconst p = new Proker(t);\np.compute(10000);\np.show();"],
  "mappings": "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",
  "names": ["Card", "_Card", "number", "suite", "_tmpNumber", "_tmpSuite", "c1", "c2", "asc", "factor", "Hand", "_Hand", "cards", "a", "b", "Card", "i", "other", "card", "hand_str", "Combination", "cards", "hands", "i", "j", "k", "l", "m", "Hand", "best_hand", "Deck", "_Deck", "Card", "n", "card", "deckCard", "ret_card", "cards", "new_deck", "Player", "_Player", "name", "new_player", "i", "Table", "_Table", "n_players", "Deck", "i", "Player", "player", "cards", "c", "p", "valid_table_cards", "valid_player_cards", "player_combination", "Combination", "winners", "cmp", "new_table", "table_cards", "player_cards", "j", "Proker", "table", "times", "aux_table", "i", "winners", "p", "is_winner", "ret_str", "c", "player", "total", "pcent_wins", "pcent_draws", "pcent_loses", "wins_str", "draws_str", "loses_str", "t", "Table", "cards", "Card", "p", "Proker"]
}
